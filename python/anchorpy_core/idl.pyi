from typing import Union, Sequence, List, Optional
from jsonalias import Json

class IdlTypeSimple:
    Bool: "IdlTypeSimple"
    U8: "IdlTypeSimple"
    I8: "IdlTypeSimple"
    U16: "IdlTypeSimple"
    I16: "IdlTypeSimple"
    U32: "IdlTypeSimple"
    I32: "IdlTypeSimple"
    F32: "IdlTypeSimple"
    U64: "IdlTypeSimple"
    I64: "IdlTypeSimple"
    F64: "IdlTypeSimple"
    U128: "IdlTypeSimple"
    I128: "IdlTypeSimple"
    Bytes: "IdlTypeSimple"
    String: "IdlTypeSimple"
    PublicKey: "IdlTypeSimple"
    def __int__(self) -> int: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def __eq__(self, o: object) -> bool: ...

class IdlTypeDefined:
    def __init__(defined: str) -> None: ...
    @property
    def defined(self) -> str: ...

class IdlTypeOption:
    def __init__(option: IdlType) -> None: ...
    @property
    def option(self) -> IdlType: ...

class IdlTypeVec:
    def __init__(vec: IdlType) -> None: ...
    @property
    def vec(self) -> IdlType: ...

class IdlTypeArray:
    def __init__(array: Tuple[IdlType, int]) -> None: ...
    @property
    def array(self) -> Tuple[IdlType, int]: ...

class IdlConst:
    def __init__(name: str, ty: IdlType, value: str) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def ty(self) -> IdlType: ...
    @property
    def value(self) -> str: ...

class IdlField:
    def __init__(name: str, docs: Optional[Sequence[str]], ty: IdlType) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def docs(self) -> Optional[List[str]]: ...
    @property
    def ty(self) -> IdlType: ...

class IdlTypeDefinitionTyStruct:
    def __init__(fields: Sequence[IdlField]) -> None: ...
    @property
    def fields(self) -> List[IdlField]: ...

class EnumFieldsNamed:
    def __init__(fields: Sequence[IdlField]) -> None: ...
    @property
    def fields(self) -> List[IdlField]: ...

class EnumFieldsTuple:
    def __init__(fields: Sequence[IdlType]) -> None: ...
    @property
    def fields(self) -> List[IdlType]: ...

class IdlEnumVariant:
    def __init__(name: str, fields: Optional[EnumFields]) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def fields(self) -> Optional[EnumFields]: ...

class IdlTypeDefinitionTyEnum:
    def __init__(variants: Sequence[IdlEnumVariant]) -> None: ...
    @property
    def variants(self) -> List[IdlEnumVariant]: ...

IdlTypeDefinitionTy = Union[IdlTypeDefinitionTyStruct, IdlTypeDefinitionTyEnum]

class IdlTypeDefinition:
    def __init__(
        name: str, docs: Optional[Sequence[str]], ty: IdlTypeDefinitionTy
    ) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def docs(self) -> Optional[List[str]]: ...
    @property
    def ty(self) -> IdlTypeDefinitionTy: ...

IdlAccountItem = Union[IdlAccount, IdlAccounts]

class IdlAccounts:
    def __init__(name: str, accounts: Sequence[IdlAccountItem]) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def accounts(self) -> List[IdlAccountItem]: ...

class IdlSeedConst:
    def __init__(ty: IdlType, value: Json) -> None: ...
    @property
    def ty(self) -> IdlType: ...
    @property
    def value(
        self,
    ) -> Json: ...

class IdlSeedArg:
    def __init__(ty: IdlType, path: str) -> None: ...
    @property
    def ty(self) -> IdlType: ...
    @property
    def path(self) -> str: ...

class IdlSeedAccount:
    def __init__(ty: IdlType, account: Optional[String], path: str) -> None: ...
    @property
    def ty(self) -> IdlType: ...
    @property
    def acount(self) -> Optional[str]: ...
    @property
    def path(self) -> str: ...

IdlSeed = Union[IdlSeedConst, IdlSeedArg, IdlSeedAccount]

class IdlPda:
    def __init__(seeds: Sequence[IdlSeed], program_id: Optional[IdlSeed]) -> None: ...
    @property
    def seeds(self) -> List[IdlSeed]: ...
    @property
    def program_id(self) -> Optional[IdlSeed]: ...

class IdlAccount:
    def __init__(
        name: str,
        is_mut: bool,
        is_signer: bool,
        docs: Optional[Sequence[str]],
        pda: Optional[IdlPda],
        relations: Sequence[String],
    ) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def is_mut(self) -> bool: ...
    @property
    def is_signer(self) -> bool: ...
    @property
    def docs(self) -> Optional[List[str]]: ...
    @property
    def pda(self) -> Optional[IdlPda]: ...
    @property
    def relations(self) -> List[String]: ...

class IdlInstruction:
    def __init__(
        name: str,
        docs: Optional[Sequence[str]],
        accounts: Sequence[IdlAccountItem],
        args: Sequence[IdlField],
        returns: Optional[IdlType],
    ) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def docs(self) -> Optional[List[str]]: ...
    @property
    def accounts(self) -> List[IdlAccountItem]: ...
    @property
    def returns(self) -> Optional[IdlType]: ...

class IdlState:
    def __init__(
        strct: IdlTypeDefinition, methods: Sequence[IdlInstruction]
    ) -> None: ...
    @property
    def strct(self) -> IdlTypeDefinition: ...
    @property
    def methods(self) -> List[IdlInstruction]: ...

class IdlEvent:
    def __init__(name: str, fields: Sequence[IdlEventField]) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def fields(self) -> List[IdlEventField]: ...

class IdlEventField:
    def __init__(name: str, ty: IdlType, index: bool) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def ty(self) -> IdlType: ...
    @property
    def index(self) -> bool: ...

class IdlErrorCode:
    def __init__(code: u32, name: str, msg: Optional[str]) -> None: ...
    @property
    def code(self) -> u32: ...
    @property
    def name(self) -> str: ...
    @property
    def msg(self) -> Optional[str]: ...

class Idl:

    def __init__(
        version: String,
        name: str,
        docs: Optional[Sequence[str]],
        constants: Sequence[IdlConst],
        instructions: Sequence[IdlInstruction],
        state: Optional[IdlState],
        accounts: Sequence[IdlTypeDefinition],
        types: Sequence[IdlTypeDefinition],
        events: Optional[Sequence[IdlEvent]],
        errors: Optional[Sequence[IdlErrorCode]],
        metadata: Json = None,
    ) -> None: ...
    @property
    def version(self) -> str: ...
    @property
    def name(self) -> str: ...
    @property
    def docs(self) -> Optional[List[str]]: ...
    @property
    def constants(self) -> List[IdlConst]: ...
    @property
    def instructions(self) -> List[IdlInstruction]: ...
    @property
    def state(self) -> Optional[IdlState]: ...
    @property
    def accounts(self) -> List[IdlTypeDefinition]: ...
    @property
    def types(self) -> List[IdlTypeDefinition]: ...
    @property
    def events(self) -> Optional[List[IdlEvent]]: ...
    @property
    def errors(self) -> Optional[List[IdlErrorCode]]: ...
    @property
    def metadata(self) -> Json: ...

IdlTypeCompound = Union[
    IdlTypeDefined,
    IdlTypeOption,
    IdlTypeVec,
    IdlTypeArray,
]
IdlType = Union[IdlTypeCompound, IdlTypeSimple]
EnumFields = Union[EnumFieldsNamed, EnumFieldsTuple]
